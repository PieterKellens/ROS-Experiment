// Deze code werkt niet omdat ROS niet rechstreeks I²C kan communiceren.


#include <ros/ros.h>
#include <stdio.h>

// initialiseren van de functies
void delay(void);
void write_md03(unsigned char addr, unsigned char reg, unsigned char data);
void initialise(void);

// Standaard C++ main

int main(int argc, char** argv) {

  // Het programma voorstellen aan de ROS master als een "node" genaamd "FullSpeed"
  ros::init(argc, argv, "Full_Speed_node");
  // Start de node resource managers (communication, time, etc)
  ros::start();
  	initialise();
  
  // Stop de node's resources
  ros::shutdown();
  // Exit tranquilly
  return 0;
}


void initialise(void)
{
unsigned char x[36];
int direction;

	for(;;) {
					
		if(!(x[1]&0x01)) {					// Na het versnellen 
			if(direction) {
				write_md03(0xb0, 2, 245);	// Snelheid van de motor snel
				write_md03(0xb0, 3, 255);	// versnelling van de motor rustig
				write_md03(0xb0, 0, 1);		// Vooruit rijden 
				direction = 0;
			}
			else {
				write_md03(0xb0, 2, 25);	// Snelheid van de motor traag
				write_md03(0xb0, 3, 255);	// versnelling van de motor rustig
				write_md03(0xb0, 0, 2);		// Vooruit rijden
				direction = 1;
			}
		}
	}
}

// deze functie wordt gebruikt in I2C lees/schrijf routines om 1Mhz clock snelheden te gebruiken
void delay100(void)		// 100uS vertraging
{				
int i;
	for(i=0; i<6; i++);
}

// deze functie schrijft de data naar het MD03 motor board
void write_md03(unsigned char addr, unsigned char reg, unsigned char data)
{

int SEN, SSPIF, PEN;
char SSPBUF;

	SEN = 1;						// verzend start bit
	while(SEN);					// wacht tot deze weg is

	SSPIF = 0;
	SSPBUF = addr;				// Is 0xb0 voor onze motor
	while(!SSPIF);				// wachten voor een interrupt
	SSPIF = 0;					// wachten tot deze weg is

	delay100();					// 100uS vertraging

	SSPBUF = reg;				// address of register naartoe te schrijven 
	while(!SSPIF);				// wachten voor een interrupt
	SSPIF = 0;					// wacht tot deze weg is

	delay100();					// 100uS vertraging

	SSPBUF = data;				// schrijf de data 
	while(!SSPIF);				// wachten voor een interrupt
	SSPIF = 0;					// wacht tot deze weg is

	PEN = 1;						// verzend stop bit
	while(PEN);					//wacht tot deze weg is
}